#include <iostream>
#include <vector>
#include <climits>  // For INT_MIN
using namespace std;

class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int currSum = 0;  // To store the sum of the current subarray
        int maxSum = INT_MIN;  // To store the maximum subarray sum, initialized to the lowest possible value

        // Traverse through the array
        for (int i = 0; i < nums.size(); i++) {
            currSum += nums[i];  // Add current element to currSum
            maxSum = max(maxSum, currSum);  // Update maxSum if currSum is greater

            // If currSum becomes negative, reset it to 0 (ignore negative sums)
            if (currSum < 0) {
                currSum = 0;
            }
        }

        return maxSum;  // Return the maximum subarray sum found
    }
};

int main() {
    Solution sol;
    vector<int> nums = {-2, 1, -3, 4, -1, 2, 1, -5, 4};  // Example input
    int result = sol.maxSubArray(nums);  // Calling the function
    cout << "Maximum Subarray Sum: " << result << endl;  // Output the result

    return 0;
}
